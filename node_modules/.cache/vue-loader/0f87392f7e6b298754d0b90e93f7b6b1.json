{"remainingRequest":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/werner-dev/www/topnot-cli/src/components/address-autocomplete.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/werner-dev/www/topnot-cli/src/components/address-autocomplete.vue","mtime":1561193195668},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.google-map {\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  background: gray;}\n\n*, *::after, *::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\n.search-location {\n  display: block;\n  width: 60vw;\n  margin: 0 auto;\n  margin-top: 5vw;\n  font-size: 20px;\n  font-weight: 400;\n  outline: none;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n  border-radius: 10px;\n}\n",{"version":3,"sources":["address-autocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"address-autocomplete.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-card class=\"elevation-12\">\n        <v-card-text>\n            <v-form  @submit.prevent=\"onLocate($data)\" >\n                <div >\n                    <input\n                       ref=\"autocomplete\"\n                       placeholder=\" Enter your location\"\n                       class=\"search-location\"\n                       onfocus=\"value = ''\"\n                       type=\"text\"\n                       />\n                </div>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn type=\"submit\" color=\"accent\" >Locate\n                        <span slot=\"loader\" class=\"custom-loader\">\n                            <v-icon light>cached</v-icon>\n                        </span>\n                    </v-btn>\n                </v-card-actions>\n            </v-form>\n        </v-card-text>\n    </v-card>\n</template>\n\n\n<script>\n\nimport { mapActions } from 'vuex'\nimport { mapGetters } from 'vuex'\n\nexport default {\n\n    name: 'addressautocomplete',\n\n    props: ['name'],\n\n    data: function() {\n        return {\n            title: 'topnot',\n            mapName: this.name + \"-map\",\n            markerCoordinates: [{\n              latitude: 51.501527,\n              longitude: -0.1921837\n            }],\n            address: '',\n            long: '',\n            lat: '',\n        }\n    },\n    \n    methods: {\n        ...mapActions({\n            onLocate: 'locate'\n        })\n    },\n\n    mounted: function() {\n\n        //API call to allow autocompletion\n        this.autocomplete = new google.maps.places.Autocomplete(\n            (this.$refs.autocomplete), {\n                types: ['geocode']\n            }\n        );\n\n        /*\n        Allows to select a place that is returned by autocomplete. Get the address/lat/long\n        of the selected location. It calls callBack() as well as creates/up[dates] the map.\n        it is also used to return all nearby hairdressers\n        */\n       \n        this.autocomplete.addListener('place_changed', () => {\n\n            //place selected\n            let place = this.autocomplete.getPlace();\n            let ac = place.address_components;\n            var address = '';\n\n            //The address of the selected location is formatted into a more\n            // readable format\n            if (place.address_components) {\n                address = [\n                    (place.address_components[0] && place.address_components[0].long_name || ''),\n                    (place.address_components[1] && place.address_components[1].short_name || ''),\n                    (place.address_components[2] && place.address_components[2].short_name || '')\n                ].join(' ');\n            }\n\n            //Sets variable of the users selected loaction\n            this.lat = place.geometry.location.lat();\n            this.long = place.geometry.location.lng();\n            this.markerCoordinates.latitude = this.lat;\n            this.markerCoordinates.longitude = this.long;\n            this.address = address;\n        });\n    }\n    \n};\n\n</script>\n\n<style lang=\"scss\">\n\n.google-map {\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  background: gray;}\n\n*, *::after, *::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\n.search-location {\n  display: block;\n  width: 60vw;\n  margin: 0 auto;\n  margin-top: 5vw;\n  font-size: 20px;\n  font-weight: 400;\n  outline: none;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n  border-radius: 10px;\n}\n</style>\n"]}]}