{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/address-autocomplete.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/app/src/components/address-autocomplete.vue","mtime":1555249805000},{"path":"/app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/app/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/app/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1555006869000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.google-map {\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  background: gray;}\n\n*, *::after, *::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\n.search-location {\n  display: block;\n  width: 60vw;\n  margin: 0 auto;\n  margin-top: 5vw;\n  font-size: 20px;\n  font-weight: 400;\n  outline: none;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n  border-radius: 10px;\n}\n",{"version":3,"sources":["address-autocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2UA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"address-autocomplete.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\n    <v-card class=\"elevation-12\">\n        <v-card-text>\n            <v-form  @submit.prevent=\"onLocate($data)\" >\n                <div >\n                    <input\n                       v-model=\"address\"\n                       ref=\"autocomplete\"\n                       placeholder=\" Enter your location\"\n                       class=\"search-location\"\n                       onfocus=\"value = ''\"\n                       type=\"text\"\n                       label = 'address'\n                       />\n                </div>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn type=\"submit\" color=\"accent\" >Locate\n                        <span slot=\"loader\" class=\"custom-loader\">\n                            <v-icon light>cached</v-icon>\n                        </span>\n                    </v-btn>\n                </v-card-actions>\n            </v-form>\n        </v-card-text>\n    </v-card>\n            \n            \n            <!--\n             Display all Nearby hairdresser that is in our DB\n            -->\n            <!-- <section>\n                <v-layout row wrap v-for=\"hairdresser in nearbyHairdressers\" :key=\"hairdresser.creatorId\" class=\"mb-2\">\n                  <v-flex xs12 sm10 md8 offset-sm1 offset-md2>\n                    <v-card class=\"info\">\n                      <v-container fluid>\n                        <v-layout row>\n                          <v-flex xs7 sm8 md9>\n                            <v-card-title primary-title>\n                              <div>\n                                <h5 class=\"white--text mb-0\">{{ hairdresser.firstname }}</h5>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.lastname }}</h5>\n                                    <h3 class=\"white--text mb-0\">{{ hairdresser.companyName }}</h3>\n                                    <h3 class=\"white--text mb-0\">{{ hairdresser.companyAddr }}</h3>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.companyLat }}</h5>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.companyLong }}</h5>\n                                    <h5 class=\"white--text mb-2\">{{ hairdresser.hashtags }}</h5>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.age }}</h5>\n                                    <h5 class=\"white--text mb-2\">{{ lat }}</h5>\n                              </div>\n                            </v-card-title>\n                            <v-card-actions>\n                            </v-card-actions>\n                          </v-flex>\n                        </v-layout>\n                      </v-container>\n                    </v-card>\n                  </v-flex>\n                </v-layout>\n            </section> -->\n\n\n            <!--\n             Display all hair_care places returned by google api\n            -->\n<!--                 <div id = 'cardsAndMap' style=\"visibility: hidden\">\n                    <v-flex xs12  offset v-for=\"item in shoppingItems\">\n                        <br/>\n                        <v-card >\n                            <v-card-title primary-title >\n                                <div >\n                                  <h3 > {{ item.name }} </h3>\n                                  <h5> {{ item.lat }} </h5>\n                                  <h5> {{ item.long }} </h5>\n                                  <h5> {{ item.companyAddr }} </h5>\n                                  <h5> {{ item.hours }} </h5>\n                                </div>\n                            </v-card-title>\n                            <v-card-actions>\n                                <v-btn flat color=\"orange\">Hallor At Me</v-btn>\n                                <v-btn flat color=\"orange\">Scope Location</v-btn>\n                            </v-card-actions>\n                        </v-card>\n                    </v-flex>\n                    <div class=\"google-map\" :id=\"mapName\"></div>\n              </div> -->\n        \n    \n</template>\n\n\n<script>\n    var x ;\n    var service;//google stuff\n    var shoppingItems; \n    var map;//google stuff\n    var infowindow;//google stuff\n    var radius = 5000;\n\n    //Dummy value is replaced by all Nearby hairdressers\n    var nearbyHairdressersOG = [] ;\n\n    //Dummy values that is replaced by places that Google Nearby Search returned\n    var shoppingItemsOG= [\n    {\n        name: 'Chop Shop',\n        lat: '10',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    },\n    {\n        name: 'Partners',\n        lat: '12',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    }];\n\n\n     /*\n     callback\n     results : places returned from google API\n     It populates the nearbyHairdressers if the corresponding hairdresser\n     ( that is returned by Google API) is present in our DB\n     It also calls createMarker for each place in results\n     */\n    function callback(results, status) {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n            //empty both arrays before populating\n            shoppingItemsOG.length = 0;\n            nearbyHairdressersOG.length = 0;\n            for (var i = 0; i < results.length; i++) {\n                var place = results[i];\n                if (x != null) { //if x is not empty\n                    for (var j = 0; j < x.length; j++) {\n                        //checks if place ( google place) matches x ( heairdresser form DB) by name\n                        if(x[j].companyName == place.name){\n                            nearbyHairdressersOG.push({\n                                firstname: x[j].firstname,\n                                lastname: x[j].lastname,\n                                companyName: x[j].companyName,\n                                companyAddr: x[j].companyAddr,\n                                companyLat: x[j].companyLat,\n                                companyLong: x[j].companyLong,\n                                hashtags: x[j].hashtags,\n                                age: x[j].age\n                            });\n                        }\n                    }\n                }\n                createMarker(results[i]);\n            }\n        }\n    }\n    /*\n    arePointsNear\n    This function takes 2 sets of coordinates and a radius\n    It computes whether the points are inside the radius\n    Is called in methods\n    */\n    function arePointsNear(checkPoint, centerPoint, km) {\n        var ky = 40000 / 360;\n        var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\n        var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\n        var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\n        return Math.sqrt(dx * dx + dy * dy) <= km;\n    }\n\n\n    /*\n    createMarker\n    place : a single place from google api\n    It creates a marker to be placed on the map.\n    It also populates shoppingItems ..... shopping itmes is used to store and display\n    the places google's api returns....testing purposes\n    */\n    function createMarker(place) {\n        var placeLoc = place.geometry.location;\n\n        var marker = new google.maps.Marker({\n            map: map,\n            position: place.geometry.location\n        });\n\n        shoppingItemsOG.push({  \n            name: place.name,\n            lat: place.geometry.location.lat(),\n            long: place.geometry.location.lng(),\n            companyAddr:place.vicinity,\n            hours : place.opening_hours\n        });\n\n        google.maps.event.addListener(marker, 'click', function() {\n            infowindow.setContent(place.name);\n            infowindow.open(map, this);\n        });\n    }\n\n    import { mapActions } from 'vuex'\n    import { mapGetters } from 'vuex'\n\nexport default {\n\n    name: 'addressautocomplete',\n\n    props: ['name'],\n\n    data: function() {\n        return {\n            title: 'topnot',\n            mapName: this.name + \"-map\",\n            markerCoordinates: [{\n              latitude: 51.501527,\n              longitude: -0.1921837\n            }],\n            address: '',//of the current user\n            long: '',// of the current user\n            lat: '',//of the current user\n            /*\n            Variable to store all nearby hairdresser ( places that is both in our\n            DB as well as returned in the nearby places search)\n            */\n            nearbyHairdressers :nearbyHairdressersOG,\n            shoppingItems: shoppingItemsOG,//All the places that Google Nearby Search returned\n            hairdessers: [],//Supposed to be all the hairdresssers in our DB... but only works sometimes\n        }\n    },\n\n    computed: {\n        // ...mapGetters([\n        //     'address'\n        // ]),\n        /* Is supposed to call loadedHairDresser in users.js and return the\n        list of hairdressers in the DB\n\n        Something is wrong regarding the timing of this. It is sometimes called\n        too late and the x variable is empty when x is called in a function above.\n\n        EDIT : This method does not have to be here. I added this to mounted under\n        the .autocomplete.addListener and it seems to work.\n        */\n        hairdressers () {\n            return x = this.$store.getters.loadedHairdressers;\n        }\n    },\n\n    methods: {\n        ...mapActions({\n            onLocate: 'locate'\n        })\n    },\n\n    mounted: function() {\n\n        //Calls loadedHairdressers directly...also unsrue about the placing of this\n        this.$store.dispatch('loadHairdressers');\n\n        //API call to allow autocompletion\n        this.autocomplete = new google.maps.places.Autocomplete(\n            (this.$refs.autocomplete), {\n                types: ['geocode']\n            }\n        );\n\n        /*\n        Allows to select a place that is returned by autocomplete. Get the address/lat/long\n        of the selected location. It calls callBack() as well as creates/up[dates] the map.\n        it is also used to return all nearby hairdressers\n        */\n       \n        this.autocomplete.addListener('place_changed', () => {\n\n            x = this.$store.getters.loadedHairdressers;\n\n            //place selected\n            let place = this.autocomplete.getPlace();\n            let ac = place.address_components;\n            var address = ' ';\n\n            //The address of the selected location is formatted into a more\n            // readable format\n            if (place.address_components) {\n                address = [\n                    (place.address_components[0] && place.address_components[0].long_name || ''),\n                    (place.address_components[1] && place.address_components[1].short_name || ''),\n                    (place.address_components[2] && place.address_components[2].short_name || '')\n                ].join(' ');\n            }\n\n            //Sets variable of the users selected loaction\n            this.lat = place.geometry.location.lat();\n            this.long = place.geometry.location.lng();\n            this.markerCoordinates.latitude = this.lat;\n            this.markerCoordinates.longitude = this.long;\n            this.address = address;\n\n            //Map Things\n            var latLong =  new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n            const element = document.getElementById(this.mapName)\n\n            const options = {\n                zoom: 14,\n                center: latLong\n            }\n\n            //map is created\n            map = new google.maps.Map(element, options);\n\n            //request used to search for all nearby hairdresser\n            var request = {\n                location: latLong,\n                radius: radius,\n                type: ['hair_care']\n            };\n\n           infowindow = new google.maps.InfoWindow();\n           service = new google.maps.places.PlacesService(map);\n            //Call to API to return nearby hairdressers\n           service.nearbySearch(request, callback);\n            //Sets the map visible\n           document.getElementById('cardsAndMap').style.visibility = 'visible';\n        });\n    }\n};\n\n</script>\n\n<style lang=\"scss\">\n\n.google-map {\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  background: gray;}\n\n*, *::after, *::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\n.search-location {\n  display: block;\n  width: 60vw;\n  margin: 0 auto;\n  margin-top: 5vw;\n  font-size: 20px;\n  font-weight: 400;\n  outline: none;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n  border-radius: 10px;\n}\n</style>\n"]}]}