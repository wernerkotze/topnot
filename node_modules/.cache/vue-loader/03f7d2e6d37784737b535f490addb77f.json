{"remainingRequest":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/werner-dev/www/topnot-cli/src/components/dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/werner-dev/www/topnot-cli/src/components/dashboard.vue","mtime":1556389760812},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar x ;\nvar service;//google stuff\nvar shoppingItems; \nvar map;//google stuff\nvar infowindow;//google stuff\nvar radius = 5000;\n\n//Dummy value is replaced by all Nearby hairdressers\nvar nearbyHairdressersOG = [] ;\n\n//Dummy values that is replaced by places that Google Nearby Search returned\nvar shoppingItemsOG= [\n  {\n      name: 'Chop Shop',\n      lat: '10',\n      long: '10',\n      companyAddr : 'address',\n      hours : 'open'\n  },\n  {\n      name: 'Partners',\n      lat: '12',\n      long: '10',\n      companyAddr : 'address',\n      hours : 'open'\n  }];\n\n/*\n   callback\n   results : places returned from google API\n   It populates the nearbyHairdressers if the corresponding hairdresser\n   ( that is returned by Google API) is present in our DB\n   It also calls createMarker for each place in results\n   */\n  function callback(results, status) {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n          //empty both arrays before populating\n          shoppingItemsOG.length = 0;\n          nearbyHairdressersOG.length = 0;\n          for (var i = 0; i < results.length; i++) {\n              var place = results[i];\n              if (x != null) { //if x is not empty\n                  for (var j = 0; j < x.length; j++) {\n                      //checks if place ( google place) matches x ( heairdresser form DB) by name\n                      if(x[j].companyName == place.name){\n                          nearbyHairdressersOG.push({\n                              firstname: x[j].firstname,\n                              lastname: x[j].lastname,\n                              companyName: x[j].companyName,\n                              companyAddr: x[j].companyAddr,\n                              companyLat: x[j].companyLat,\n                              companyLong: x[j].companyLong,\n                              hashtags: x[j].hashtags,\n                              age: x[j].age\n                          });\n                      }\n                  }\n              }\n              createMarker(results[i]);\n          }\n      }\n  }\n  \n  /*\n  arePointsNear\n  This function takes 2 sets of coordinates and a radius\n  It computes whether the points are inside the radius\n  Is called in methods\n  */\n  function arePointsNear(checkPoint, centerPoint, km) {\n      var ky = 40000 / 360;\n      var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\n      var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\n      var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\n      return Math.sqrt(dx * dx + dy * dy) <= km;\n  }\n\n  /*\n  createMarker\n  place : a single place from google api\n  It creates a marker to be placed on the map.\n  It also populates shoppingItems ..... shopping itmes is used to store and display\n  the places google's api returns....testing purposes\n  */\n  function createMarker(place) {\n      var placeLoc = place.geometry.location;\n\n      var marker = new google.maps.Marker({\n          map: map,\n          position: place.geometry.location\n      });\n\n      shoppingItemsOG.push({  \n          name: place.name,\n          lat: place.geometry.location.lat(),\n          long: place.geometry.location.lng(),\n          companyAddr:place.vicinity,\n          hours : place.opening_hours\n      });\n\n      google.maps.event.addListener(marker, 'click', function() {\n          infowindow.setContent(place.name);\n          infowindow.open(map, this);\n      });\n  }\n\nimport navbar from '@/components/navbar.vue'\n\nimport { mapActions } from 'vuex'\nimport { mapGetters } from 'vuex'\nimport { mapState } from 'vuex'\n  \nexport default {\n\n  name:'dashboard',\n\n  props: {\n    name: 'name'\n  },\n\n  data: function() {\n    return {\n      drawer: null,\n      mapName: this.name + \"-map\",\n      markerCoordinates: [{\n        latitude: 51.501527,\n        longitude: -0.1921837\n      }],\n      /*\n      Variable to store all nearby hairdresser ( places that is both in our\n      DB as well as returned in the nearby places search)\n      */\n      nearbyHairdressers :nearbyHairdressersOG,\n      shoppingItems: shoppingItemsOG,//All the places that Google Nearby Search returned\n      hairdessers: [],//Supposed to be all the hairdresssers in our DB... but only works sometimes\n    }\n  },\n\n  components: {\n    navbar\n  },\n\n  methods:{\n    LocateNearby: function() {\n      this.$store.dispatch('loadHairdressers');\n      x = this.$store.getters.loadedHairdressers;\n\n      let place = this.$store.getters.address;\n\n      //Sets variable of the users selected loaction\n      // this.lat = this.$store.getters.lat;\n      // this.long = this.$store.getters.long;\n      this.markerCoordinates.latitude = this.lat;\n      this.markerCoordinates.longitude = this.long;\n      \n\n      //Map Things\n      var latLong =  new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n      const element = document.getElementById(this.mapName)\n\n      const options = {\n          zoom: 14,\n          center: latLong\n      }\n\n      //map is created\n      map = new google.maps.Map(element, options);\n\n      //request used to search for all nearby hairdresser\n      var request = {\n          location: latLong,\n          radius: radius,\n          type: ['hair_care']\n      };\n\n      infowindow = new google.maps.InfoWindow();\n\n      service = new google.maps.places.PlacesService(map);\n      //Call to API to return nearby hairdressers\n      service.nearbySearch(request, callback);\n      //Sets the map visible\n      //document.getElementById('cardsAndMap').style.visibility = 'visible';\n      \n    }\n  },\n\n  computed: {\n    ...mapGetters([\n        'address',\n        'long',\n        'lat',\n        'loadedHairdressers'\n    ]),\n    // ...mapState([\n    //   'address',\n    //   'long',\n    //   'lat'\n    // ]),\n    //  Is supposed to call loadedHairDresser in users.js and return the\n    // list of hairdressers in the DB\n\n    // Something is wrong regarding the timing of this. It is sometimes called\n    // too late and the x variable is empty when x is called in a function above.\n\n    // EDIT : This method does not have to be here. I added this to mounted under\n    // the .autocomplete.addListener and it seems to work.\n    \n    hairdressers () {\n        return x = this.$store.getters.loadedHairdressers;\n    },\n\n    userIsAuthenticated () {\n      return this.$store.getters.user !== null && this.$store.getters.user !== undefined;\n    }\n\n  },\n  mounted:  function() {\n    //Calls loadedHairdressers directly...also unsrue about the placing of this\n    //this.$store.dispatch('loadHairdressers');\n    this.LocateNearby();\n    \n    \n  } \n\n};\n",{"version":3,"sources":["dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"dashboard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-app id=\"inspire\">\n    <navbar/>\n    <v-content>\n      <v-container fluid fill-height>\n        <v-layout justify-center>\n         <v-flex>\n              <v-container\n                fluid\n                grid-list-sm\n              >\n                <v-layout row wrap>\n                  <v-flex\n                    v-for=\"hairdresser in nearbyHairdressers\" \n                    :key=\"hairdresser.creatorId\"\n                  >\n                    <v-card>\n                      <v-img\n                        src=\"http://wallpaperstock.net/the-beatles-minimalistic-illustration_wallpapers_43830_1600x1200.jpg\"\n                        height=\"200px\"\n                      >\n                        <v-container\n                          fill-height\n                          fluid\n                          pa-2\n                        >\n                          <v-layout fill-height>\n                            <v-flex xs12 align-end flexbox>\n                              <span class=\"headline white--text\">{{ hairdresser.firstname }} {{ hairdresser.lastname }}</span><br>\n                              <span class=\"white--text\">{{ hairdresser.companyName }}</span></br>\n                              <span class=\"white--text\">{{ hairdresser.companyAddr }}</span>\n                            </v-flex>\n                          </v-layout>\n                        </v-container>\n                      </v-img>\n\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn icon>\n                          <v-icon>favorite</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>bookmark</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>share</v-icon>\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-flex>\n                  <v-flex\n                    v-for=\"item in shoppingItems\"\n                  >\n                    <v-card>\n                      <v-img\n                        src=\"https://cdn.shopify.com/s/files/1/0434/4749/files/Hazard_Haircut_1_grande.jpg?v=1528904232\"\n                        height=\"200px\"\n                      >\n                        <v-container\n                          fill-height\n                          fluid\n                          pa-2\n                        >\n                          <v-layout fill-height>\n                            <v-flex xs12 align-end flexbox>\n                              <span class=\"headline white--text\">{{ item.name }}</span><br>\n                              <span class=\"white--text\">{{ item.companyAddr }}</span></br>\n                              <span class=\"white--text\">{{ item.hours }}</span>\n                            </v-flex>\n                          </v-layout>\n                        </v-container>\n                      </v-img>\n\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn icon>\n                          <v-icon>favorite</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>bookmark</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>share</v-icon>\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-flex>\n                </v-layout>\n              </v-container>\n            \n        </v-flex>\n       </v-layout>\n      </v-container>\n    </v-content>\n    <div class=\"google-map\" :id=\"mapName\" hidden></div>\n    <v-footer color=\"indigo\" app>\n    </v-footer>\n  </v-app>\n</template>\n\n<script>\n  var x ;\n  var service;//google stuff\n  var shoppingItems; \n  var map;//google stuff\n  var infowindow;//google stuff\n  var radius = 5000;\n\n  //Dummy value is replaced by all Nearby hairdressers\n  var nearbyHairdressersOG = [] ;\n\n  //Dummy values that is replaced by places that Google Nearby Search returned\n  var shoppingItemsOG= [\n    {\n        name: 'Chop Shop',\n        lat: '10',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    },\n    {\n        name: 'Partners',\n        lat: '12',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    }];\n\n  /*\n     callback\n     results : places returned from google API\n     It populates the nearbyHairdressers if the corresponding hairdresser\n     ( that is returned by Google API) is present in our DB\n     It also calls createMarker for each place in results\n     */\n    function callback(results, status) {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n            //empty both arrays before populating\n            shoppingItemsOG.length = 0;\n            nearbyHairdressersOG.length = 0;\n            for (var i = 0; i < results.length; i++) {\n                var place = results[i];\n                if (x != null) { //if x is not empty\n                    for (var j = 0; j < x.length; j++) {\n                        //checks if place ( google place) matches x ( heairdresser form DB) by name\n                        if(x[j].companyName == place.name){\n                            nearbyHairdressersOG.push({\n                                firstname: x[j].firstname,\n                                lastname: x[j].lastname,\n                                companyName: x[j].companyName,\n                                companyAddr: x[j].companyAddr,\n                                companyLat: x[j].companyLat,\n                                companyLong: x[j].companyLong,\n                                hashtags: x[j].hashtags,\n                                age: x[j].age\n                            });\n                        }\n                    }\n                }\n                createMarker(results[i]);\n            }\n        }\n    }\n    \n    /*\n    arePointsNear\n    This function takes 2 sets of coordinates and a radius\n    It computes whether the points are inside the radius\n    Is called in methods\n    */\n    function arePointsNear(checkPoint, centerPoint, km) {\n        var ky = 40000 / 360;\n        var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\n        var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\n        var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\n        return Math.sqrt(dx * dx + dy * dy) <= km;\n    }\n\n    /*\n    createMarker\n    place : a single place from google api\n    It creates a marker to be placed on the map.\n    It also populates shoppingItems ..... shopping itmes is used to store and display\n    the places google's api returns....testing purposes\n    */\n    function createMarker(place) {\n        var placeLoc = place.geometry.location;\n\n        var marker = new google.maps.Marker({\n            map: map,\n            position: place.geometry.location\n        });\n\n        shoppingItemsOG.push({  \n            name: place.name,\n            lat: place.geometry.location.lat(),\n            long: place.geometry.location.lng(),\n            companyAddr:place.vicinity,\n            hours : place.opening_hours\n        });\n\n        google.maps.event.addListener(marker, 'click', function() {\n            infowindow.setContent(place.name);\n            infowindow.open(map, this);\n        });\n    }\n\n  import navbar from '@/components/navbar.vue'\n\n  import { mapActions } from 'vuex'\n  import { mapGetters } from 'vuex'\n  import { mapState } from 'vuex'\n    \n  export default {\n\n    name:'dashboard',\n\n    props: {\n      name: 'name'\n    },\n\n    data: function() {\n      return {\n        drawer: null,\n        mapName: this.name + \"-map\",\n        markerCoordinates: [{\n          latitude: 51.501527,\n          longitude: -0.1921837\n        }],\n        /*\n        Variable to store all nearby hairdresser ( places that is both in our\n        DB as well as returned in the nearby places search)\n        */\n        nearbyHairdressers :nearbyHairdressersOG,\n        shoppingItems: shoppingItemsOG,//All the places that Google Nearby Search returned\n        hairdessers: [],//Supposed to be all the hairdresssers in our DB... but only works sometimes\n      }\n    },\n\n    components: {\n      navbar\n    },\n\n    methods:{\n      LocateNearby: function() {\n        this.$store.dispatch('loadHairdressers');\n        x = this.$store.getters.loadedHairdressers;\n\n        let place = this.$store.getters.address;\n\n        //Sets variable of the users selected loaction\n        // this.lat = this.$store.getters.lat;\n        // this.long = this.$store.getters.long;\n        this.markerCoordinates.latitude = this.lat;\n        this.markerCoordinates.longitude = this.long;\n        \n\n        //Map Things\n        var latLong =  new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n        const element = document.getElementById(this.mapName)\n\n        const options = {\n            zoom: 14,\n            center: latLong\n        }\n\n        //map is created\n        map = new google.maps.Map(element, options);\n\n        //request used to search for all nearby hairdresser\n        var request = {\n            location: latLong,\n            radius: radius,\n            type: ['hair_care']\n        };\n\n        infowindow = new google.maps.InfoWindow();\n\n        service = new google.maps.places.PlacesService(map);\n        //Call to API to return nearby hairdressers\n        service.nearbySearch(request, callback);\n        //Sets the map visible\n        //document.getElementById('cardsAndMap').style.visibility = 'visible';\n        \n      }\n    },\n\n    computed: {\n      ...mapGetters([\n          'address',\n          'long',\n          'lat',\n          'loadedHairdressers'\n      ]),\n      // ...mapState([\n      //   'address',\n      //   'long',\n      //   'lat'\n      // ]),\n      //  Is supposed to call loadedHairDresser in users.js and return the\n      // list of hairdressers in the DB\n\n      // Something is wrong regarding the timing of this. It is sometimes called\n      // too late and the x variable is empty when x is called in a function above.\n\n      // EDIT : This method does not have to be here. I added this to mounted under\n      // the .autocomplete.addListener and it seems to work.\n      \n      hairdressers () {\n          return x = this.$store.getters.loadedHairdressers;\n      },\n\n      userIsAuthenticated () {\n        return this.$store.getters.user !== null && this.$store.getters.user !== undefined;\n      }\n\n    },\n    mounted:  function() {\n      //Calls loadedHairdressers directly...also unsrue about the placing of this\n      //this.$store.dispatch('loadHairdressers');\n      this.LocateNearby();\n      \n      \n    } \n\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  h1 {\n    text-align: center;\n  }\n</style>\n"]}]}