{"remainingRequest":"/Users/werner-dev/www/topnot-cli/node_modules/babel-loader/lib/index.js!/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/werner-dev/www/topnot-cli/src/components/address-autocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/werner-dev/www/topnot-cli/src/components/address-autocomplete.vue","mtime":1556208532615},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/werner-dev/www/topnot-cli/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions } from 'vuex';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'addressautocomplete',\n  props: ['name'],\n  data: function data() {\n    return {\n      title: 'topnot',\n      mapName: this.name + \"-map\",\n      markerCoordinates: [{\n        latitude: 51.501527,\n        longitude: -0.1921837\n      }],\n      address: '',\n      long: '',\n      lat: ''\n    };\n  },\n  methods: _objectSpread({}, mapActions({\n    onLocate: 'locate'\n  })),\n  mounted: function mounted() {\n    var _this = this;\n\n    //API call to allow autocompletion\n    this.autocomplete = new google.maps.places.Autocomplete(this.$refs.autocomplete, {\n      types: ['geocode']\n    });\n    /*\n    Allows to select a place that is returned by autocomplete. Get the address/lat/long\n    of the selected location. It calls callBack() as well as creates/up[dates] the map.\n    it is also used to return all nearby hairdressers\n    */\n\n    this.autocomplete.addListener('place_changed', function () {\n      // x = this.$store.getters.loadedHairdressers;\n      //place selected\n      var place = _this.autocomplete.getPlace();\n\n      var ac = place.address_components;\n      var address = ''; //The address of the selected location is formatted into a more\n      // readable format\n\n      if (place.address_components) {\n        address = [place.address_components[0] && place.address_components[0].long_name || '', place.address_components[1] && place.address_components[1].short_name || '', place.address_components[2] && place.address_components[2].short_name || ''].join(' ');\n      } //Sets variable of the users selected loaction\n\n\n      _this.lat = place.geometry.location.lat();\n      _this.long = place.geometry.location.lng();\n      _this.markerCoordinates.latitude = _this.lat;\n      _this.markerCoordinates.longitude = _this.long;\n      _this.address = address;\n    });\n  }\n};",{"version":3,"sources":["address-autocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AAEA,EAAA,IAAA,EAAA,qBAFA;AAIA,EAAA,KAAA,EAAA,CAAA,MAAA,CAJA;AAMA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,KAAA,IAAA,GAAA,MAFA;AAGA,MAAA,iBAAA,EAAA,CAAA;AACA,QAAA,QAAA,EAAA,SADA;AAEA,QAAA,SAAA,EAAA,CAAA;AAFA,OAAA,CAHA;AAOA,MAAA,OAAA,EAAA,EAPA;AAQA,MAAA,IAAA,EAAA,EARA;AASA,MAAA,GAAA,EAAA;AATA,KAAA;AAWA,GAlBA;AAmBA,EAAA,OAAA,oBACA,UAAA,CAAA;AACA,IAAA,QAAA,EAAA;AADA,GAAA,CADA,CAnBA;AAyBA,EAAA,OAAA,EAAA,mBAAA;AAAA;;AAEA;AACA,SAAA,YAAA,GAAA,IAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CACA,KAAA,KAAA,CAAA,YADA,EACA;AACA,MAAA,KAAA,EAAA,CAAA,SAAA;AADA,KADA,CAAA;AAMA;;;;;;AAMA,SAAA,YAAA,CAAA,WAAA,CAAA,eAAA,EAAA,YAAA;AAEA;AAEA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,YAAA,CAAA,QAAA,EAAA;;AACA,UAAA,EAAA,GAAA,KAAA,CAAA,kBAAA;AACA,UAAA,OAAA,GAAA,EAAA,CAPA,CASA;AACA;;AACA,UAAA,KAAA,CAAA,kBAAA,EAAA;AACA,QAAA,OAAA,GAAA,CACA,KAAA,CAAA,kBAAA,CAAA,CAAA,KAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,EAAA,SAAA,IAAA,EADA,EAEA,KAAA,CAAA,kBAAA,CAAA,CAAA,KAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,EAAA,UAAA,IAAA,EAFA,EAGA,KAAA,CAAA,kBAAA,CAAA,CAAA,KAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,EAAA,UAAA,IAAA,EAHA,EAIA,IAJA,CAIA,GAJA,CAAA;AAKA,OAjBA,CAmBA;;;AACA,MAAA,KAAA,CAAA,GAAA,GAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,IAAA,GAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,iBAAA,CAAA,QAAA,GAAA,KAAA,CAAA,GAAA;AACA,MAAA,KAAA,CAAA,iBAAA,CAAA,SAAA,GAAA,KAAA,CAAA,IAAA;AACA,MAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AACA,KAzBA;AA0BA;AAlEA,CAAA","sourcesContent":["<template>\n    <v-card class=\"elevation-12\">\n        <v-card-text>\n            <v-form  @submit.prevent=\"onLocate($data)\" >\n                <div >\n                    <input\n                       ref=\"autocomplete\"\n                       placeholder=\" Enter your location\"\n                       class=\"search-location\"\n                       onfocus=\"value = ''\"\n                       type=\"text\"\n                       />\n                </div>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn type=\"submit\" color=\"accent\" >Locate\n                        <span slot=\"loader\" class=\"custom-loader\">\n                            <v-icon light>cached</v-icon>\n                        </span>\n                    </v-btn>\n                </v-card-actions>\n            </v-form>\n        </v-card-text>\n    </v-card>\n</template>\n\n\n<script>\n\nimport { mapActions } from 'vuex'\nimport { mapGetters } from 'vuex'\n\nexport default {\n\n    name: 'addressautocomplete',\n\n    props: ['name'],\n\n    data: function() {\n        return {\n            title: 'topnot',\n            mapName: this.name + \"-map\",\n            markerCoordinates: [{\n              latitude: 51.501527,\n              longitude: -0.1921837\n            }],\n            address: '',\n            long: '',\n            lat: '',\n        }\n    },\n    methods: {\n        ...mapActions({\n            onLocate: 'locate'\n        })\n    },\n\n    mounted: function() {\n\n        //API call to allow autocompletion\n        this.autocomplete = new google.maps.places.Autocomplete(\n            (this.$refs.autocomplete), {\n                types: ['geocode']\n            }\n        );\n\n        /*\n        Allows to select a place that is returned by autocomplete. Get the address/lat/long\n        of the selected location. It calls callBack() as well as creates/up[dates] the map.\n        it is also used to return all nearby hairdressers\n        */\n       \n        this.autocomplete.addListener('place_changed', () => {\n\n            // x = this.$store.getters.loadedHairdressers;\n\n            //place selected\n            let place = this.autocomplete.getPlace();\n            let ac = place.address_components;\n            var address = '';\n\n            //The address of the selected location is formatted into a more\n            // readable format\n            if (place.address_components) {\n                address = [\n                    (place.address_components[0] && place.address_components[0].long_name || ''),\n                    (place.address_components[1] && place.address_components[1].short_name || ''),\n                    (place.address_components[2] && place.address_components[2].short_name || '')\n                ].join(' ');\n            }\n\n            //Sets variable of the users selected loaction\n            this.lat = place.geometry.location.lat();\n            this.long = place.geometry.location.lng();\n            this.markerCoordinates.latitude = this.lat;\n            this.markerCoordinates.longitude = this.long;\n            this.address = address;\n        });\n    }\n};\n\n</script>\n\n<style lang=\"scss\">\n\n.google-map {\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  background: gray;}\n\n*, *::after, *::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\n.search-location {\n  display: block;\n  width: 60vw;\n  margin: 0 auto;\n  margin-top: 5vw;\n  font-size: 20px;\n  font-weight: 400;\n  outline: none;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n  border-radius: 10px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}