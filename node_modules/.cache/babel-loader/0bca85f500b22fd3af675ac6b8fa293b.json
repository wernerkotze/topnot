{"remainingRequest":"/Users/werner-dev/www/topnot-cli/node_modules/babel-loader/lib/index.js!/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/werner-dev/www/topnot-cli/src/components/dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/werner-dev/www/topnot-cli/src/components/dashboard.vue","mtime":1556376326551},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/werner-dev/www/topnot-cli/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar x;\nvar service; //google stuff\n\nvar shoppingItems;\nvar map; //google stuff\n\nvar infowindow; //google stuff\n\nvar radius = 5000; //Dummy value is replaced by all Nearby hairdressers\n\nvar nearbyHairdressersOG = []; //Dummy values that is replaced by places that Google Nearby Search returned\n\nvar shoppingItemsOG = [{\n  name: 'Chop Shop',\n  lat: '10',\n  long: '10',\n  companyAddr: 'address',\n  hours: 'open'\n}, {\n  name: 'Partners',\n  lat: '12',\n  long: '10',\n  companyAddr: 'address',\n  hours: 'open'\n}];\n/*\n   callback\n   results : places returned from google API\n   It populates the nearbyHairdressers if the corresponding hairdresser\n   ( that is returned by Google API) is present in our DB\n   It also calls createMarker for each place in results\n   */\n\nfunction callback(results, status) {\n  if (status == google.maps.places.PlacesServiceStatus.OK) {\n    //empty both arrays before populating\n    shoppingItemsOG.length = 0;\n    nearbyHairdressersOG.length = 0;\n\n    for (var i = 0; i < results.length; i++) {\n      var place = results[i];\n\n      if (x != null) {\n        //if x is not empty\n        for (var j = 0; j < x.length; j++) {\n          //checks if place ( google place) matches x ( heairdresser form DB) by name\n          if (x[j].companyName == place.name) {\n            nearbyHairdressersOG.push({\n              firstname: x[j].firstname,\n              lastname: x[j].lastname,\n              companyName: x[j].companyName,\n              companyAddr: x[j].companyAddr,\n              companyLat: x[j].companyLat,\n              companyLong: x[j].companyLong,\n              hashtags: x[j].hashtags,\n              age: x[j].age\n            });\n          }\n        }\n      }\n\n      createMarker(results[i]);\n    }\n  }\n}\n/*\narePointsNear\nThis function takes 2 sets of coordinates and a radius\nIt computes whether the points are inside the radius\nIs called in methods\n*/\n\n\nfunction arePointsNear(checkPoint, centerPoint, km) {\n  var ky = 40000 / 360;\n  var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\n  var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\n  var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\n  return Math.sqrt(dx * dx + dy * dy) <= km;\n}\n/*\ncreateMarker\nplace : a single place from google api\nIt creates a marker to be placed on the map.\nIt also populates shoppingItems ..... shopping itmes is used to store and display\nthe places google's api returns....testing purposes\n*/\n\n\nfunction createMarker(place) {\n  var placeLoc = place.geometry.location;\n  var marker = new google.maps.Marker({\n    map: map,\n    position: place.geometry.location\n  });\n  shoppingItemsOG.push({\n    name: place.name,\n    lat: place.geometry.location.lat(),\n    long: place.geometry.location.lng(),\n    companyAddr: place.vicinity,\n    hours: place.opening_hours\n  });\n  google.maps.event.addListener(marker, 'click', function () {\n    infowindow.setContent(place.name);\n    infowindow.open(map, this);\n  });\n}\n\nimport navbar from '@/components/navbar.vue';\nimport { mapActions } from 'vuex';\nimport { mapGetters } from 'vuex';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'dashboard',\n  props: {\n    name: 'name'\n  },\n  data: function data() {\n    return {\n      drawer: null,\n      mapName: this.name + \"-map\",\n      markerCoordinates: [{\n        latitude: 51.501527,\n        longitude: -0.1921837\n      }],\n\n      /*\n      Variable to store all nearby hairdresser ( places that is both in our\n      DB as well as returned in the nearby places search)\n      */\n      nearbyHairdressers: nearbyHairdressersOG,\n      shoppingItems: shoppingItemsOG,\n      //All the places that Google Nearby Search returned\n      hairdessers: [] //Supposed to be all the hairdresssers in our DB... but only works sometimes\n\n    };\n  },\n  components: {\n    navbar: navbar\n  },\n  methods: {\n    LocateNearby: function LocateNearby() {\n      x = this.$store.getters.loadedHairdressers;\n      var place = this.$store.getters.address; //Sets variable of the users selected loaction\n      // this.lat = this.$store.getters.lat;\n      // this.long = this.$store.getters.long;\n\n      this.markerCoordinates.latitude = this.lat;\n      this.markerCoordinates.longitude = this.long; //Map Things\n\n      var latLong = new google.maps.LatLng(this.markerCoordinates.latitude, this.markerCoordinates.longitude);\n      var element = document.getElementById(this.mapName);\n      var options = {\n        zoom: 14,\n        center: latLong //map is created\n\n      };\n      map = new google.maps.Map(element, options); //request used to search for all nearby hairdresser\n\n      var request = {\n        location: latLong,\n        radius: radius,\n        type: ['hair_care']\n      };\n      infowindow = new google.maps.InfoWindow();\n      service = new google.maps.places.PlacesService(map); //Call to API to return nearby hairdressers\n\n      service.nearbySearch(request, callback); //Sets the map visible\n\n      document.getElementById('cardsAndMap').style.visibility = 'visible';\n    }\n  },\n  computed: _objectSpread({}, mapGetters(['address', 'long', 'lat', 'loadedHairdressers']), {\n    // ...mapState([\n    //   'address',\n    //   'long',\n    //   'lat'\n    // ]),\n    //  Is supposed to call loadedHairDresser in users.js and return the\n    // list of hairdressers in the DB\n    // Something is wrong regarding the timing of this. It is sometimes called\n    // too late and the x variable is empty when x is called in a function above.\n    // EDIT : This method does not have to be here. I added this to mounted under\n    // the .autocomplete.addListener and it seems to work.\n    hairdressers: function hairdressers() {\n      return x = this.$store.getters.loadedHairdressers;\n    },\n    userIsAuthenticated: function userIsAuthenticated() {\n      return this.$store.getters.user !== null && this.$store.getters.user !== undefined;\n    }\n  }),\n  mounted: function mounted() {\n    //Calls loadedHairdressers directly...also unsrue about the placing of this\n    //this.$store.dispatch('loadHairdressers');\n    this.LocateNearby();\n  }\n};",{"version":3,"sources":["dashboard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app id=\"inspire\">\n    <navbar/>\n    <v-content>\n      <v-container fluid fill-height>\n        <v-layout>\n         <v-flex xs12 sm6 offset-sm3>\n           <v-card>\n             <v-img\n               src=\"https://cdn.vuetifyjs.com/images/cards/desert.jpg\"\n               aspect-ratio=\"2.75\"\n             ></v-img>\n             <v-card-title primary-title>\n               <div>\n                 <h3 class=\"headline mb-0\">Kangaroo Valley Safari</h3>\n                 <div>Located two hours south of Sydney in the <br>Southern Highlands of New South Wales, ...</div>\n               </div>\n             </v-card-title>\n             <v-card-actions>\n               <v-btn flat color=\"orange\">Share</v-btn>\n               <v-btn flat color=\"orange\">Explore</v-btn>\n             </v-card-actions>\n           </v-card>\n            <!--\n             Display all hair_care places returned by google api\n            -->\n            <div id = 'cardsAndMap' style=\"visibility: hidden\">\n                <v-flex xs12  offset v-for=\"item in shoppingItems\">\n                    <br/>\n                    <v-card >\n                        <v-card-title primary-title >\n                            <div >\n                              <h3 > {{ item.name }} </h3>\n                              <h5> {{ item.lat }} </h5>\n                              <h5> {{ item.long }} </h5>\n                              <h5> {{ item.companyAddr }} </h5>\n                              <h5> {{ item.hours }} </h5>\n                            </div>\n                        </v-card-title>\n                        <v-card-actions>\n                            <v-btn flat color=\"orange\">Hallor At Me</v-btn>\n                            <v-btn flat color=\"orange\">Scope Location</v-btn>\n                        </v-card-actions>\n                    </v-card>\n                </v-flex>\n              </div>\n            <!--\n             Display all Nearby hairdresser that is in our DB\n            -->\n            <section>\n                <v-layout row wrap v-for=\"hairdresser in nearbyHairdressers\" :key=\"hairdresser.creatorId\" class=\"mb-2\">\n                  <v-flex xs12 sm10 md8 offset-sm1 offset-md2>\n                    <v-card class=\"info\">\n                      <v-container fluid>\n                        <v-layout row>\n                          <v-flex xs7 sm8 md9>\n                            <v-card-title primary-title>\n                              <div>\n                                <h5 class=\"white--text mb-0\">{{ hairdresser.firstname }}</h5>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.lastname }}</h5>\n                                    <h3 class=\"white--text mb-0\">{{ hairdresser.companyName }}</h3>\n                                    <h3 class=\"white--text mb-0\">{{ hairdresser.companyAddr }}</h3>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.companyLat }}</h5>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.companyLong }}</h5>\n                                    <h5 class=\"white--text mb-2\">{{ hairdresser.hashtags }}</h5>\n                                    <h5 class=\"white--text mb-0\">{{ hairdresser.age }}</h5>\n                                    <h5 class=\"white--text mb-2\">{{ lat }}</h5>\n                              </div>\n                            </v-card-title>\n                            <v-card-actions>\n                            </v-card-actions>\n                          </v-flex>\n                        </v-layout>\n                      </v-container>\n                    </v-card>\n                  </v-flex>\n                </v-layout>\n            </section>\n         </v-flex>\n       </v-layout>\n\n      </v-container>\n    </v-content>\n    <div class=\"google-map\" :id=\"mapName\"></div>\n    <v-footer color=\"indigo\" app>\n    </v-footer>\n  </v-app>\n</template>\n\n<script>\n  var x ;\n  var service;//google stuff\n  var shoppingItems; \n  var map;//google stuff\n  var infowindow;//google stuff\n  var radius = 5000;\n\n  //Dummy value is replaced by all Nearby hairdressers\n  var nearbyHairdressersOG = [] ;\n\n  //Dummy values that is replaced by places that Google Nearby Search returned\n  var shoppingItemsOG= [\n    {\n        name: 'Chop Shop',\n        lat: '10',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    },\n    {\n        name: 'Partners',\n        lat: '12',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    }];\n\n  /*\n     callback\n     results : places returned from google API\n     It populates the nearbyHairdressers if the corresponding hairdresser\n     ( that is returned by Google API) is present in our DB\n     It also calls createMarker for each place in results\n     */\n    function callback(results, status) {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n            //empty both arrays before populating\n            shoppingItemsOG.length = 0;\n            nearbyHairdressersOG.length = 0;\n            for (var i = 0; i < results.length; i++) {\n                var place = results[i];\n                if (x != null) { //if x is not empty\n                    for (var j = 0; j < x.length; j++) {\n                        //checks if place ( google place) matches x ( heairdresser form DB) by name\n                        if(x[j].companyName == place.name){\n                            nearbyHairdressersOG.push({\n                                firstname: x[j].firstname,\n                                lastname: x[j].lastname,\n                                companyName: x[j].companyName,\n                                companyAddr: x[j].companyAddr,\n                                companyLat: x[j].companyLat,\n                                companyLong: x[j].companyLong,\n                                hashtags: x[j].hashtags,\n                                age: x[j].age\n                            });\n                        }\n                    }\n                }\n                createMarker(results[i]);\n            }\n        }\n    }\n    \n    /*\n    arePointsNear\n    This function takes 2 sets of coordinates and a radius\n    It computes whether the points are inside the radius\n    Is called in methods\n    */\n    function arePointsNear(checkPoint, centerPoint, km) {\n        var ky = 40000 / 360;\n        var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\n        var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\n        var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\n        return Math.sqrt(dx * dx + dy * dy) <= km;\n    }\n\n    /*\n    createMarker\n    place : a single place from google api\n    It creates a marker to be placed on the map.\n    It also populates shoppingItems ..... shopping itmes is used to store and display\n    the places google's api returns....testing purposes\n    */\n    function createMarker(place) {\n        var placeLoc = place.geometry.location;\n\n        var marker = new google.maps.Marker({\n            map: map,\n            position: place.geometry.location\n        });\n\n        shoppingItemsOG.push({  \n            name: place.name,\n            lat: place.geometry.location.lat(),\n            long: place.geometry.location.lng(),\n            companyAddr:place.vicinity,\n            hours : place.opening_hours\n        });\n\n        google.maps.event.addListener(marker, 'click', function() {\n            infowindow.setContent(place.name);\n            infowindow.open(map, this);\n        });\n    }\n\n  import navbar from '@/components/navbar.vue'\n\n  import { mapActions } from 'vuex'\n  import { mapGetters } from 'vuex'\n  import { mapState } from 'vuex'\n    \n  export default {\n\n    name:'dashboard',\n\n    props: {\n      name: 'name'\n    },\n\n    data: function() {\n      return {\n        drawer: null,\n        mapName: this.name + \"-map\",\n        markerCoordinates: [{\n          latitude: 51.501527,\n          longitude: -0.1921837\n        }],\n        /*\n        Variable to store all nearby hairdresser ( places that is both in our\n        DB as well as returned in the nearby places search)\n        */\n        nearbyHairdressers :nearbyHairdressersOG,\n        shoppingItems: shoppingItemsOG,//All the places that Google Nearby Search returned\n        hairdessers: [],//Supposed to be all the hairdresssers in our DB... but only works sometimes\n      }\n    },\n\n    components: {\n      navbar\n    },\n\n    methods:{\n      LocateNearby: function() {\n        x = this.$store.getters.loadedHairdressers;\n\n        let place = this.$store.getters.address;\n\n        //Sets variable of the users selected loaction\n        // this.lat = this.$store.getters.lat;\n        // this.long = this.$store.getters.long;\n        this.markerCoordinates.latitude = this.lat;\n        this.markerCoordinates.longitude = this.long;\n        \n\n        //Map Things\n        var latLong =  new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n        const element = document.getElementById(this.mapName)\n\n        const options = {\n            zoom: 14,\n            center: latLong\n        }\n\n        //map is created\n        map = new google.maps.Map(element, options);\n\n        //request used to search for all nearby hairdresser\n        var request = {\n            location: latLong,\n            radius: radius,\n            type: ['hair_care']\n        };\n\n        infowindow = new google.maps.InfoWindow();\n\n        service = new google.maps.places.PlacesService(map);\n        //Call to API to return nearby hairdressers\n        service.nearbySearch(request, callback);\n        //Sets the map visible\n        document.getElementById('cardsAndMap').style.visibility = 'visible';\n        \n      }\n    },\n\n    computed: {\n      ...mapGetters([\n          'address',\n          'long',\n          'lat',\n          'loadedHairdressers'\n      ]),\n      // ...mapState([\n      //   'address',\n      //   'long',\n      //   'lat'\n      // ]),\n      //  Is supposed to call loadedHairDresser in users.js and return the\n      // list of hairdressers in the DB\n\n      // Something is wrong regarding the timing of this. It is sometimes called\n      // too late and the x variable is empty when x is called in a function above.\n\n      // EDIT : This method does not have to be here. I added this to mounted under\n      // the .autocomplete.addListener and it seems to work.\n      \n      hairdressers () {\n          return x = this.$store.getters.loadedHairdressers;\n      },\n\n      userIsAuthenticated () {\n        return this.$store.getters.user !== null && this.$store.getters.user !== undefined;\n      }\n\n    },\n    mounted:  function() {\n      //Calls loadedHairdressers directly...also unsrue about the placing of this\n      //this.$store.dispatch('loadHairdressers');\n      this.LocateNearby();\n      \n      \n    } \n\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  h1 {\n    text-align: center;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}