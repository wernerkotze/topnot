{"remainingRequest":"/Users/werner-dev/www/topnot-cli/node_modules/babel-loader/lib/index.js!/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/werner-dev/www/topnot-cli/src/components/dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/werner-dev/www/topnot-cli/src/components/dashboard.vue","mtime":1560885271651},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/werner-dev/www/topnot-cli/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/werner-dev/www/topnot-cli/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//google stuff\nvar x;\nvar service;\nvar shoppingItems;\nvar map;\nvar infowindow;\nvar radius = 5000; //Dummy value is replaced by all Nearby hairdressers\n\nvar nearbyHairdressersOG = []; //Dummy values that is replaced by places that Google Nearby Search returned\n\nvar shoppingItemsOG = [{\n  name: 'Chop Shop',\n  lat: '10',\n  long: '10',\n  companyAddr: 'address',\n  hours: 'open'\n}, {\n  name: 'Partners',\n  lat: '12',\n  long: '10',\n  companyAddr: 'address',\n  hours: 'open'\n}];\n/*\n callback\n results: places returned from google API\n It populates the nearbyHairdressers if the corresponding hairdresser\n ( that is returned by Google API) is present in our DB\n It also calls createMarker for each place in results\n*/\n\nfunction callback(results, status) {\n  if (status == google.maps.places.PlacesServiceStatus.OK) {\n    //empty both arrays before populating\n    shoppingItemsOG.length = 0;\n    nearbyHairdressersOG.length = 0;\n\n    for (var i = 0; i < results.length; i++) {\n      var place = results[i];\n      console.log('found something in google'); // if (x != null) { //if x is not empty\n      //   console.log('x not empty');\n      //     for (var j = 0; j < x.length; j++) {\n      //         //checks if place ( google place) matches x ( heairdresser form DB) by name\n      //         if(x[j].companyName == place.name){\n      //           console.log('found something in db');\n      //             nearbyHairdressersOG.push({\n      //                 firstname: x[j].firstname,\n      //                 lastname: x[j].lastname,\n      //                 companyName: x[j].companyName,\n      //                 companyAddr: x[j].companyAddr,\n      //                 companyLat: x[j].companyLat,\n      //                 companyLong: x[j].companyLong,\n      //                 hashtags: x[j].hashtags,\n      //                 age: x[j].age\n      //             });\n      //         }\n      //     }\n      // }\n\n      createMarker(results[i]);\n    }\n  }\n}\n\nfunction initMap(lat, long) {\n  // let place = this.$store.getters.address;\n  //Sets variable of the users selected location\n  this.markerCoordinates.latitude = lat;\n  this.markerCoordinates.longitude = long;\n  var latLong = new google.maps.LatLng(this.markerCoordinates.latitude, this.markerCoordinates.longitude);\n  infowindow = new google.maps.InfoWindow();\n  map = new google.maps.Map(document.getElementById(this.mapName), {\n    center: latLong,\n    zoom: 15\n  });\n  var request = {\n    location: latLong,\n    radius: radius,\n    type: ['hair_care']\n  };\n  service = new google.maps.places.PlacesService(map);\n  service.nearbySearch(request, callback);\n}\n/*\narePointsNear\nThis function takes 2 sets of coordinates and a radius\nIt computes whether the points are inside the radius\nIs called in methods\n*/\n\n\nfunction arePointsNear(checkPoint, centerPoint, km) {\n  var ky = 40000 / 360;\n  var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\n  var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\n  var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\n  return Math.sqrt(dx * dx + dy * dy) <= km;\n}\n/*\ncreateMarker\nplace : a single place from google api\nIt creates a marker to be placed on the map.\nIt also populates shoppingItems ..... shopping itmes is used to store and display\nthe places google's api returns....testing purposes\n*/\n\n\nfunction createMarker(place) {\n  var placeLoc = place.geometry.location;\n  var marker = new google.maps.Marker({\n    map: map,\n    position: place.geometry.location\n  });\n  shoppingItemsOG.push({\n    name: place.name,\n    lat: place.geometry.location.lat(),\n    long: place.geometry.location.lng(),\n    companyAddr: place.vicinity,\n    hours: place.opening_hours\n  });\n\n  if (x != null) {\n    //if x is not empty\n    console.log('x not empty');\n\n    for (var j = 0; j < x.length; j++) {\n      //checks if place ( google place) matches x ( heairdresser form DB) by name\n      if (x[j].companyName == place.name) {\n        console.log('found something in db');\n        nearbyHairdressersOG.push({\n          firstname: x[j].firstname,\n          lastname: x[j].lastname,\n          companyName: x[j].companyName,\n          companyAddr: x[j].companyAddr,\n          companyLat: x[j].companyLat,\n          companyLong: x[j].companyLong,\n          hashtags: x[j].hashtags,\n          age: x[j].age\n        });\n      }\n    }\n  }\n\n  google.maps.event.addListener(marker, 'click', function () {\n    infowindow.setContent(place.name);\n    infowindow.open(map, this);\n  });\n}\n\nimport navbar from '@/components/navbar.vue';\nimport { mapActions } from 'vuex';\nimport { mapGetters } from 'vuex';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'dashboard',\n  props: {\n    name: 'name'\n  },\n  data: function data() {\n    return {\n      drawer: null,\n      mapName: this.name + \"-map\",\n      markerCoordinates: [{\n        latitude: 51.501527,\n        longitude: -0.1921837\n      }],\n      map: null,\n      service: null,\n      infowindow: null,\n\n      /*\n      Variable to store all nearby hairdresser ( places that is both in our\n      DB as well as returned in the nearby places search)\n      */\n      nearbyHairdressers: nearbyHairdressersOG,\n      shoppingItems: shoppingItemsOG,\n      //All the places that Google Nearby Search returned\n      hairdessers: [] //Supposed to be all the hairdresssers in our DB... but only works sometimes\n\n    };\n  },\n  components: {\n    navbar: navbar\n  },\n  methods: {// initMap: function() {\n    //   let place = this.$store.getters.address;\n    //   //Sets variable of the users selected location\n    //   this.markerCoordinates.latitude = this.lat;\n    //   this.markerCoordinates.longitude = this.long;\n    //   var latLong = new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n    //   infowindow = new google.maps.InfoWindow();\n    //   map = new google.maps.Map(\n    //       document.getElementById(this.mapName), {center: latLong, zoom: 15});\n    //   var request = {\n    //       location: latLong,\n    //       radius: radius,\n    //       type: ['hair_care']\n    //   };\n    //   service = new google.maps.places.PlacesService(map);\n    //   service.nearbySearch(request, callback);\n    // }\n    // LocateNearby: function() {\n    //   // this.$store.dispatch('loadHairdressers');\n    //   x = this.$store.getters.loadedHairdressers;\n    //   let place = this.$store.getters.address;\n    //   //Sets variable of the users selected location\n    //   this.markerCoordinates.latitude = this.lat;\n    //   this.markerCoordinates.longitude = this.long;\n    //   var latLong =  new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n    //   const element = document.getElementById(this.mapName)\n    //   const options = {\n    //       zoom: 14,\n    //       center: latLong\n    //   }\n    //   //map is created\n    //   map = new google.maps.Map(element, options);\n    //   //request used to search for all nearby hairdresser\n    //   var request = {\n    //       location: latLong,\n    //       radius: radius,\n    //       type: ['hair_care']\n    //   };\n    //   infowindow = new google.maps.InfoWindow();\n    //   service = new google.maps.places.PlacesService(map);\n    //   service.nearbySearch(request, callback);\n    // }\n  },\n  computed: _objectSpread({}, mapGetters(['address', 'long', 'lat']), {\n    // hairdressers () {\n    //   return x = this.$store.getters.loadedHairdressers;\n    // },\n    userIsAuthenticated: function userIsAuthenticated() {\n      return this.$store.getters.user !== null && this.$store.getters.user !== undefined;\n    }\n  }),\n  mounted: function mounted() {\n    this.$store.dispatch('loadHairdressers');\n  }\n};",{"version":3,"sources":["dashboard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app id=\"inspire\">\n    <navbar/>\n    <v-content>\n      <v-container fluid fill-height>\n        <v-layout justify-center>\n         <v-flex>\n              <v-container\n                fluid\n                grid-list-sm\n              >\n                <v-layout row wrap>\n                  <v-flex\n                    v-for=\"hairdresser in nearbyHairdressers\" \n                    :key=\"hairdresser.creatorId\"\n                  >\n                    <v-card>\n                      <v-img\n                        src=\"http://wallpaperstock.net/the-beatles-minimalistic-illustration_wallpapers_43830_1600x1200.jpg\"\n                        height=\"200px\"\n                      >\n                        <v-container\n                          fill-height\n                          fluid\n                          pa-2\n                        >\n                          <v-layout fill-height>\n                            <v-flex xs12 align-end flexbox>\n                              <span class=\"headline white--text\">{{ hairdresser.firstname }} {{ hairdresser.lastname }}</span><br>\n                              <span class=\"white--text\">{{ hairdresser.companyName }}</span></br>\n                              <span class=\"white--text\">{{ hairdresser.companyAddr }}</span>\n                            </v-flex>\n                          </v-layout>\n                        </v-container>\n                      </v-img>\n\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn icon>\n                          <v-icon>favorite</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>bookmark</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>share</v-icon>\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-flex>\n                  <v-flex\n                    v-for=\"item in shoppingItems\"\n                  >\n                    <v-card>\n                      <v-img\n                        src=\"https://cdn.shopify.com/s/files/1/0434/4749/files/Hazard_Haircut_1_grande.jpg?v=1528904232\"\n                        height=\"200px\"\n                      >\n                        <v-container\n                          fill-height\n                          fluid\n                          pa-2\n                        >\n                          <v-layout fill-height>\n                            <v-flex xs12 align-end flexbox>\n                              <span class=\"headline white--text\">{{ item.name }}</span><br>\n                              <span class=\"white--text\">{{ item.companyAddr }}</span></br>\n                              <span class=\"white--text\">{{ item.hours }}</span>\n                            </v-flex>\n                          </v-layout>\n                        </v-container>\n                      </v-img>\n\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn icon>\n                          <v-icon>favorite</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>bookmark</v-icon>\n                        </v-btn>\n                        <v-btn icon>\n                          <v-icon>share</v-icon>\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-flex>\n                </v-layout>\n              </v-container>\n        </v-flex>\n       </v-layout>\n      </v-container>\n    </v-content>\n    <div class=\"google-map\" :id=\"mapName\" hidden></div>\n    <v-footer color=\"indigo\" app>\n    </v-footer>\n  </v-app>\n</template>\n\n<script>\n  //google stuff\n  var x;\n  var service;      \n  var shoppingItems; \n  var map;          \n  var infowindow;   \n  var radius = 5000;\n\n  //Dummy value is replaced by all Nearby hairdressers\n  var nearbyHairdressersOG = [];\n\n  //Dummy values that is replaced by places that Google Nearby Search returned\n  var shoppingItemsOG = [\n    {\n        name: 'Chop Shop',\n        lat: '10',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    },\n    {\n        name: 'Partners',\n        lat: '12',\n        long: '10',\n        companyAddr : 'address',\n        hours : 'open'\n    }];\n\n    /*\n     callback\n     results: places returned from google API\n     It populates the nearbyHairdressers if the corresponding hairdresser\n     ( that is returned by Google API) is present in our DB\n     It also calls createMarker for each place in results\n    */\n   \n    function callback(results, status) {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n            //empty both arrays before populating\n            shoppingItemsOG.length = 0;\n            nearbyHairdressersOG.length = 0;\n            for (var i = 0; i < results.length; i++) {\n                var place = results[i];\n                console.log('found something in google');\n                // if (x != null) { //if x is not empty\n                //   console.log('x not empty');\n                //     for (var j = 0; j < x.length; j++) {\n                //         //checks if place ( google place) matches x ( heairdresser form DB) by name\n                //         if(x[j].companyName == place.name){\n                //           console.log('found something in db');\n                //             nearbyHairdressersOG.push({\n                //                 firstname: x[j].firstname,\n                //                 lastname: x[j].lastname,\n                //                 companyName: x[j].companyName,\n                //                 companyAddr: x[j].companyAddr,\n                //                 companyLat: x[j].companyLat,\n                //                 companyLong: x[j].companyLong,\n                //                 hashtags: x[j].hashtags,\n                //                 age: x[j].age\n                //             });\n                //         }\n                //     }\n                // }\n                createMarker(results[i]);\n            }\n        }\n\n    }\n\n    function initMap(lat, long) {\n        // let place = this.$store.getters.address;\n\n        //Sets variable of the users selected location\n        this.markerCoordinates.latitude = lat;\n        this.markerCoordinates.longitude = long;\n      \n        var latLong = new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n\n        infowindow = new google.maps.InfoWindow();\n\n        map = new google.maps.Map(\n            document.getElementById(this.mapName), {center: latLong, zoom: 15});\n\n        var request = {\n            location: latLong,\n            radius: radius,\n            type: ['hair_care']\n        };\n       \n        service = new google.maps.places.PlacesService(map);\n\n        service.nearbySearch(request, callback);\n    }\n    \n    /*\n    arePointsNear\n    This function takes 2 sets of coordinates and a radius\n    It computes whether the points are inside the radius\n    Is called in methods\n    */\n    function arePointsNear(checkPoint, centerPoint, km) {\n        var ky = 40000 / 360;\n        var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\n        var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\n        var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\n        return Math.sqrt(dx * dx + dy * dy) <= km;\n    }\n\n    /*\n    createMarker\n    place : a single place from google api\n    It creates a marker to be placed on the map.\n    It also populates shoppingItems ..... shopping itmes is used to store and display\n    the places google's api returns....testing purposes\n    */\n    function createMarker(place) {\n        var placeLoc = place.geometry.location;\n\n        var marker = new google.maps.Marker({\n            map: map,\n            position: place.geometry.location\n        });\n\n        shoppingItemsOG.push({  \n            name: place.name,\n            lat: place.geometry.location.lat(),\n            long: place.geometry.location.lng(),\n            companyAddr: place.vicinity,\n            hours : place.opening_hours\n        });\n\n        if (x != null) { //if x is not empty\n          console.log('x not empty');\n            for (var j = 0; j < x.length; j++) {\n                //checks if place ( google place) matches x ( heairdresser form DB) by name\n                if(x[j].companyName == place.name){\n                  console.log('found something in db');\n                    nearbyHairdressersOG.push({\n                        firstname: x[j].firstname,\n                        lastname: x[j].lastname,\n                        companyName: x[j].companyName,\n                        companyAddr: x[j].companyAddr,\n                        companyLat: x[j].companyLat,\n                        companyLong: x[j].companyLong,\n                        hashtags: x[j].hashtags,\n                        age: x[j].age\n                    });\n                }\n            }\n        }\n\n        google.maps.event.addListener(marker, 'click', function() {\n            infowindow.setContent(place.name);\n            infowindow.open(map, this);\n        });\n    }\n\n  import navbar from '@/components/navbar.vue'\n\n  import { mapActions } from 'vuex'\n  import { mapGetters } from 'vuex'\n  import { mapState } from 'vuex'\n    \n  export default {\n\n    name:'dashboard',\n\n    props: {\n      name: 'name'\n    },\n\n    data: function() {\n      return {\n        drawer: null,\n        mapName: this.name + \"-map\",\n        markerCoordinates: [{\n          latitude: 51.501527,\n          longitude: -0.1921837\n        }],\n        map: null,\n        service: null,\n        infowindow: null,\n        /*\n        Variable to store all nearby hairdresser ( places that is both in our\n        DB as well as returned in the nearby places search)\n        */\n        nearbyHairdressers :nearbyHairdressersOG,\n        shoppingItems: shoppingItemsOG,//All the places that Google Nearby Search returned\n        hairdessers: [], //Supposed to be all the hairdresssers in our DB... but only works sometimes\n      }\n    },\n\n    components: {\n      navbar\n    },\n\n    methods:{\n\n      // initMap: function() {\n      //   let place = this.$store.getters.address;\n\n      //   //Sets variable of the users selected location\n      //   this.markerCoordinates.latitude = this.lat;\n      //   this.markerCoordinates.longitude = this.long;\n      \n      //   var latLong = new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n\n      //   infowindow = new google.maps.InfoWindow();\n\n      //   map = new google.maps.Map(\n      //       document.getElementById(this.mapName), {center: latLong, zoom: 15});\n\n      //   var request = {\n      //       location: latLong,\n      //       radius: radius,\n      //       type: ['hair_care']\n      //   };\n       \n      //   service = new google.maps.places.PlacesService(map);\n\n      //   service.nearbySearch(request, callback);\n\n      // }\n\n      // LocateNearby: function() {\n\n      //   // this.$store.dispatch('loadHairdressers');\n        \n      //   x = this.$store.getters.loadedHairdressers;\n\n      //   let place = this.$store.getters.address;\n\n      //   //Sets variable of the users selected location\n      //   this.markerCoordinates.latitude = this.lat;\n      //   this.markerCoordinates.longitude = this.long;\n      \n        \n      //   var latLong =  new google.maps.LatLng(this.markerCoordinates.latitude,this.markerCoordinates.longitude)\n\n      //   const element = document.getElementById(this.mapName)\n\n      //   const options = {\n      //       zoom: 14,\n      //       center: latLong\n      //   }\n\n      //   //map is created\n      //   map = new google.maps.Map(element, options);\n\n      //   //request used to search for all nearby hairdresser\n      //   var request = {\n      //       location: latLong,\n      //       radius: radius,\n      //       type: ['hair_care']\n      //   };\n\n      //   infowindow = new google.maps.InfoWindow();\n      //   service = new google.maps.places.PlacesService(map);\n      //   service.nearbySearch(request, callback);\n      // }\n\n    },\n\n    computed: {\n      ...mapGetters([\n          'address',\n          'long',\n          'lat',\n          // 'loadedHairdressers'\n      ]),\n      \n      // hairdressers () {\n      //   return x = this.$store.getters.loadedHairdressers;\n      // },\n\n      userIsAuthenticated () {\n        return this.$store.getters.user !== null && this.$store.getters.user !== undefined;\n      }\n\n    },\n\n    mounted() {\n\n      this.$store.dispatch('loadHairdressers');\n\n    },\n\n  };\n\n</script>\n<style lang=\"scss\" scoped>\n  h1 {\n    text-align: center;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}